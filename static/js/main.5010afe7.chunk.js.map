{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Searchbox.js","robots.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","image","className","alt","src","CardList","anime","console","log","map","user","i","key","title","image_url","Searchbox","searchField","searchChange","type","placeholder","onChange","robots","id","username","App","data","a","fetch","method","headers","then","response","json","cardData","setState","results","onSearchChange","event","target","value","state","this","filterRobots","filter","robot","toLowerCase","includes","Anime","length","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5010afe7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\n\nconst Card = ({name,email,image}) => {\n    return (\n        <div className = 'tc bg-light-blue dib br5 pad3 ma2 grow shadow-2 bw2'>\n            <img alt = 'robots' src= {image}/>\n            <div>\n                <h2> {name} </h2>\n                <p> {email}</p>\n            </div>\n        </div>\n        );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ anime }) => {\n    \n    return (\n        <div>{console.log(\"anime\",anime)}\n       { anime.map((user,i) => {\n        return  <Card  key = {i} name= {anime[i].title} image = {anime[i].image_url} />\n    } )};\n   </div>\n    );\n}\nexport default CardList ;  ","import React from 'react';\n\nconst Searchbox = ({searchField , searchChange}) =>{\n    return (\n        <div className = \"tc bg-light-green  dib br5 pad3 ma2  shadow-2 bw2\">      \n              <input \n              className = 'ba b--green bg-light-green '\n              type = 'search' \n              placeholder = 'search'\n              onChange = {searchChange} />\n        </div>\n\n    )\n}\nexport default Searchbox;","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  ","import React  from 'react';\nimport CardList from './CardList';\nimport Searchbox from './Searchbox';\nimport { robots } from './robots';\n\nclass App extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            robots : robots , \n            cardData : [],\n            searchField : ''\n        }\n    }\n    \n  componentDidMount(){\n    this.data()\n}\n\n  data= async()=>{\n    \n      fetch('https://cors-anywhere.herokuapp.com/https://api.jikan.moe/v3/search/anime?q=naruto', {\n          method: 'GET',\n          \n          headers: {\n\n            'Content-Type': 'application/json',\n          \n          },\n        \n        })\n          .then(response => response.json())\n          .then(cardData => this.setState({cardData : cardData.results}))\n          \n          }\n    \n    onSearchChange = (event) =>{\n        this.setState({searchField : event.target.value}) \n    }\n    render() {\n        const filterRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        })\n        const Anime = this.state.cardData.length > 0 \n        ? this.state.cardData.filter(anime => {\n          \n            return anime.title.toLowerCase().includes(this.state.searchField.toLowerCase())\n              \n        }) : this.state.cardData\n         return (  \n            <div className= 'tc'> {console.log(Anime,\"jrjjf\")}\n                <h1 className = 'f1'> Naruto</h1>\n                <Searchbox searchChange = {this.onSearchChange}/>\n                <CardList robots = {filterRobots}\n                       anime = {Anime}     \n                />\n           </div>\n           )\n\n    }\n};\n\nexport default App ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App'\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <App/>\n, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}